# -*- coding: utf-8 -*-
"""agents.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xtin-U-A9GV8COU0Aj8hq5KsWQdZuwPZ
"""

!pip install --quiet crewai langchain-openai gradio python-dotenv pydantic -q

import os
import json
import textwrap
from typing import Optional, Dict, Any, List
from datetime import datetime

from crewai import Agent, Task, Crew, Process
from langchain_openai import ChatOpenAI
from google.colab import userdata

os.environ["OPENAI_API_KEY"] = userdata.get('openAI')

MODEL_NAME = "gpt-4o-mini"
TEMPERATURE = 0.3
llm = ChatOpenAI(model=MODEL_NAME, temperature=TEMPERATURE)

def startup_inputs(
    domain: str,
    target_audience: str,
    geography: str,
    constraints: Optional[str] = None,
) -> Dict[str, Any]:
    return {
        "domain": domain.strip(),
        "target_audience": target_audience.strip(),
        "geography": geography.strip(),
        "constraints": constraints.strip() if constraints else "Limited budget, 3-month timeline",
    }


def make_startup_tasks(inputs: Dict[str, Any]) -> List[Task]:
    context = (
        f"DOMAIN: {inputs['domain']}\n"
        f"TARGET_AUDIENCE: {inputs['target_audience']}\n"
        f"GEOGRAPHY: {inputs['geography']}\n"
        f"CONSTRAINTS: {inputs['constraints']}\n"
    )

    task_1 = Task(
        description=textwrap.dedent(f"""
        Generate innovative product ideas for launch in the given domain.

        Context:
        {context}

        Create 3-5 realistic product concepts that address market needs. For each product provide:
        - Product name
        - Problem being solved
        - Target customer segment
        - Core features (3-4 key features)
        - Unique selling proposition
        - Monetization strategy

        Return as JSON with key "ideas" containing an array of ideas.
        """).strip(),
        agent=idea_creator,
        expected_output="JSON with product ideas",
    )

    task_2 = Task(
        description=textwrap.dedent(f"""
        Analyze the market for the generated product ideas.

        Use the ideas from the previous task.

        For each idea, provide:
        - Market size estimate
        - Key market trends
        - Target customer demographics
        - Main competitors
        - Competitive advantages
        - Market growth potential

        Return as JSON with key "market_analysis" containing analysis for each idea.
        """).strip(),
        agent=market_analyst,
        expected_output="JSON with market analysis",
    )

    task_3 = Task(
        description=textwrap.dedent(f"""
        Evaluate the feasibility of each product idea.

        Assess each idea on:
        - Technical feasibility (1-5 scale)
        - Business model viability (1-5 scale)
        - Estimated development cost (in USD)
        - Development timeline (in months)
        - Required team size
        - Key technical challenges
        - Risk assessment
        - Mitigation strategies

        Return as JSON with key "feasibility" containing detailed assessments.
        """).strip(),
        agent=feasibility_expert,
        expected_output="JSON with feasibility analysis",
    )

    task_4 = Task(
        description=textwrap.dedent(f"""
        Select the best product idea based on all previous analyses.

        Review all ideas, market analyses, and feasibility studies. Select the single
        best idea that balances innovation, market opportunity, and feasibility.
        Justify your selection with 2-3 key reasons.

        Return as JSON with key "selected_idea" and key "selection_rationale".
        """).strip(),
        agent=project_manager,
        expected_output="JSON with selection decision",
    )

    task_5 = Task(
        description=textwrap.dedent(f"""
        Write a compelling launch strategy for the selected product.

        Based on all previous work, write a professional strategy document (300-500 words) that includes:
        - Problem statement
        - Solution overview
        - Market opportunity
        - Business model
        - Competitive advantage
        - Go-to-market strategy
        - Team structure (high-level)
        - Financial projections (3-year overview)
        - Launch budget and resource allocation

        The strategy should be written for executive stakeholders.

        Return as JSON with key "investor_pitch" containing the full strategy text.
        """).strip(),
        agent=pitch_writer,
        expected_output="JSON with launch strategy",
    )

    return [task_1, task_2, task_3, task_4, task_5]


def run_startup_crew(
    domain: str,
    target_audience: str,
    geography: str,
    constraints: Optional[str] = None
):
    inputs = startup_inputs(domain, target_audience, geography, constraints)

    tasks = make_startup_tasks(inputs)
    crew = Crew(
        agents=[
            idea_creator,
            market_analyst,
            feasibility_expert,
            project_manager,
            pitch_writer
        ],
        tasks=tasks,
        process=Process.sequential,
        verbose=True,
        memory=True,
        cache=True,
    )

    result = crew.kickoff(inputs=inputs)

    def parse_json(text: str) -> Dict[str, Any]:
        try:
            return json.loads(text)
        except Exception:
            start = text.find("{")
            end = text.rfind("}")
            if start != -1 and end != -1:
                return json.loads(text[start:end+1])
            return {"raw_output": text}

    final_output = parse_json(str(result))

    output_dir = "/content/startup_outputs"
    os.makedirs(output_dir, exist_ok=True)
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")

    pitch_text = final_output.get("investor_pitch", "No strategy generated")
    pitch_file = os.path.join(output_dir, f"product_launch_{timestamp}.txt")
    with open(pitch_file, "w", encoding="utf-8") as f:
        f.write(pitch_text)

    json_file = os.path.join(output_dir, f"product_analysis_{timestamp}.json")
    with open(json_file, "w", encoding="utf-8") as f:
        json.dump(final_output, f, indent=2, ensure_ascii=False)

    return {
        "pitch": pitch_text,
        "pitch_path": pitch_file,
        "json_path": json_file,
        "full_analysis": final_output,
    }


import gradio as gr

def gradio_startup(domain, audience, geography, constraints):
    result = run_startup_crew(domain, audience, geography, constraints)
    return result["pitch"], result["pitch_path"], result["json_path"]

with gr.Blocks(title="AI Product Launch Planner") as demo:
    gr.Markdown("## AI Product Launch Planning Platform")
    gr.Markdown("Generate, analyze, and create launch strategies for new products using AI agents")

    with gr.Row():
        domain_input = gr.Textbox(
            label="Product Domain",
            placeholder="e.g., Mobile Apps, SaaS Tools, Consumer Electronics, E-commerce",
            lines=1
        )

    with gr.Row():
        audience_input = gr.Textbox(
            label="Target Market",
            placeholder="e.g., Enterprise clients, Gen Z consumers, Remote workers",
            lines=1
        )

    with gr.Row():
        geography_input = gr.Textbox(
            label="Launch Geography",
            placeholder="e.g., United States, European Union, Asia-Pacific",
            lines=1
        )

    with gr.Row():
        constraints_input = gr.Textbox(
            label="Launch Constraints",
            placeholder="e.g., Limited budget, tight timeline, regulatory requirements",
            lines=2,
            value="Limited budget, 3-month timeline"
        )

    submit_btn = gr.Button("Generate Launch Strategy")

    pitch_output = gr.Textbox(label="Launch Strategy", lines=15)
    pitch_download = gr.File(label="Download Strategy Document")
    json_download = gr.File(label="Download Full Analysis")

    submit_btn.click(
        gradio_startup,
        inputs=[domain_input, audience_input, geography_input, constraints_input],
        outputs=[pitch_output, pitch_download, json_download]
    )

demo.launch(share=True)
