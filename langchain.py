# -*- coding: utf-8 -*-
"""LangChain.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NAMUu64J3SLf8H-Ca2tIcaM2rhhu-ePA
"""

pip install langchain langchain-openai langchain_community langchain-text-splitters openai tiktoken

from langchain_community.document_loaders import WebBaseLoader
from langchain_text_splitters import RecursiveCharacterTextSplitter
from langchain_openai import ChatOpenAI
from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain
import os
from google.colab import userdata

OPENAI_API_KEY = userdata.get('openAI')

url = ["https://www.britannica.com/place/Germany","https://en.wikipedia.org/wiki/Germany","https://international.eco.de/","https://www.lonelyplanet.com/germany/attractions"]
loader = WebBaseLoader(url)
docs = loader.load()

print(f"Loaded: {len(docs)} documents(s).")
print(docs[0].page_content[:500])

splitter = RecursiveCharacterTextSplitter(chunk_size=1500, chunk_overlap=300)
chunks = splitter.split_documents(docs)
print(len(chunks))
print(chunks[1].page_content[:300])

llm = ChatOpenAI(model="gpt-3.5-turbo", temperature=0.3,openai_api_key=OPENAI_API_KEY )


prompt = PromptTemplate.from_template(
'''
    You're writing an informative and engaging overview of Germany using the content provided below, drawn from multiple sources.
    Your goal is to give someone a well-rounded understanding of the country through clear, detailed explanations.

    Please organize your response into the following three sections:

    - History
    - Economy
    - Places

    For each section, write a short but rich paragraph with enough detail to give real insight‚Äîdon‚Äôt be vague or too brief.
    Make sure the information sounds natural and human, like you're explaining it to someone curious but unfamiliar with Germany.

    Format your output like this:

    History: [your content here]
    Economy: [your content here]
    Places: [your content here]

    Be sure to draw from all the content provided below and combine the best ideas into each section.

    Content:
    {content}''')
chain = LLMChain(llm=llm, prompt=prompt)

summary = chain.run(chunks[0].page_content)
print("üìùAnswer \n", summary)